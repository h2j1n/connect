<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="kr.or.ddit.groupware.address.dao.AddressMapper">
	<resultMap type="AddressVO" id="addressMap"
		autoMapping="true">
		<id property="adrNo" column="ADR_NO" />
		<association property="employee" javaType="EmployeeVO"
			autoMapping="true" />
	</resultMap>

	<select id="selectTotalRecord" resultType="int" >
		SELECT COUNT(ADR_NO)
		FROM ADDRESS
		<where>
		ADR_DELYN = 'N'
        AND EMP_NO = #{searchVO.empNo}
        <include refid="searchFrag" />
		</where>
	</select>

	<select id="selectTotalRecordTR" resultType="int" >
		SELECT COUNT(ADR_NO)
		FROM ADDRESS
		<where>
		ADR_DELYN = 'Y'
        AND EMP_NO = #{searchVO.empNo}
        AND ADR_NM NOT LIKE '알수없음'
        <include refid="searchFrag" />
		</where>
	</select>

	<select id="selectTotalRecordMK" resultType="int" >
		SELECT COUNT(ADR_NO)
		FROM ADDRESS
		<where>
		ADR_DELYN = 'N'
		AND ADR_MARKYN = 'Y'
        AND EMP_NO = #{searchVO.empNo}
        <include refid="searchFrag" />
		</where>
	</select>

    <!-- 검색 조건 -->
	<sql id="searchFrag">
		    <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(simpleCondition.searchWord)">
		    	AND
		    	<choose>
		    		<when test="simpleCondition.searchType eq 'name'">INSTR(ADR_NM, #{simpleCondition.searchWord}) > 0</when>
		    		<when test="simpleCondition.searchType eq 'aff'">INSTR(ADR_AFF,#{simpleCondition.searchWord}) > 0</when>
		    		<otherwise>
		    			(INSTR(ADR_NM, #{simpleCondition.searchWord}) > 0
		    			OR
		    			INSTR(ADR_AFF,#{simpleCondition.searchWord}) > 0)
		    		</otherwise>
		    	</choose>
		    </if>
   </sql>


    <select id="selectAddressList" parameterType="kr.or.ddit.commons.paging.PaginationInfo" resultMap="addressMap">


		WITH ADDRESSLIST AS (
        SELECT
            ADR_NO,
            EMP_NO,
            ADR_NM,
            ADR_ONEPOS,
            ADR_POS,
            ADR_DEP,
            ADR_AFF,
            ADR_MAIL,
            ADR_TEL,
            ADR_DELYN,
            ADR_MARKYN
        FROM ADDRESS
        <where>
            ADR_DELYN = 'N' AND EMP_NO = #{searchVO.empNo}
            <include refid="searchFrag" />
        </where>
        ORDER BY ADR_NO
    )
    SELECT A.*
    FROM (
        SELECT ADDRESSLIST.*, ROWNUM RNUM
        FROM ADDRESSLIST
    ) A
    WHERE RNUM BETWEEN #{firstRecord} AND #{lastRecord}

	</select>
    <select id="selectAddressListExcel" parameterType="int" >

        SELECT
            ADR_NO,
            EMP_NO,
            ADR_NM,
            ADR_ONEPOS,
            ADR_POS,
            ADR_DEP,
            ADR_AFF,
            ADR_MAIL,
            ADR_TEL,
            ADR_DELYN,
            ADR_MARKYN
        FROM ADDRESS
		WHERE
            ADR_DELYN = 'N' AND EMP_NO = #{empNo}
        ORDER BY ADR_NO
   

	</select>


	<select id="selectAddress" parameterType="int"
		resultMap="addressMap">
		SELECT
			ADR_NO
			, EMP_NO
			, ADR_NM
			, ADR_ONEPOS
			, ADR_POS
			, ADR_DEP
			, ADR_AFF
			, ADR_MAIL
			, ADR_TEL
			, ADR_DELYN
			, ADR_MARKYN
		FROM ADDRESS
		WHERE
			ADR_NO = #{adrNo}
	</select>

	<insert id="insertAddress" parameterType="AddressVO">
		<selectKey order="BEFORE" resultType="int" keyProperty="adrNo">
			SELECT ADDRESS_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO ADDRESS
			(
				ADR_NO
				, EMP_NO
				, ADR_NM
				, ADR_ONEPOS
				, ADR_POS
				, ADR_DEP
				, ADR_AFF
				, ADR_MAIL
				, ADR_TEL
				, ADR_DELYN
				, ADR_MARKYN)
		VALUES (
				#{adrNo,jdbcType=VARCHAR}
				, #{empNo,jdbcType=VARCHAR}
				, #{adrNm,jdbcType=VARCHAR}
				, #{adrOnepos,jdbcType=VARCHAR}
				, #{adrPos,jdbcType=VARCHAR}
				, #{adrDep,jdbcType=VARCHAR}
				, #{adrAff,jdbcType=VARCHAR}
				, #{adrMail,jdbcType=VARCHAR}
				, #{adrTel,jdbcType=VARCHAR}
				, 'N'
				, 'N'
				)
	</insert>

	<update id="updateAddress" parameterType="AddressVO">
		UPDATE ADDRESS
		SET
		ADR_NM = #{adrNm,jdbcType=VARCHAR},
		ADR_ONEPOS = #{adrOnepos,jdbcType=VARCHAR},
		ADR_POS = #{adrPos,jdbcType=VARCHAR},
		ADR_DEP = #{adrDep,jdbcType=VARCHAR},
		ADR_AFF = #{adrAff,jdbcType=VARCHAR},
		ADR_MAIL = #{adrMail,jdbcType=VARCHAR},
		ADR_TEL = #{adrTel,jdbcType=VARCHAR}
		WHERE ADR_NO = #{adrNo,jdbcType=NUMERIC}
	</update>

	<update id="deleteAddress" parameterType="AddressVO">
		UPDATE ADDRESS
		SET
		ADR_DELYN = 'Y'
		WHERE ADR_NO = #{adrNo,jdbcType=NUMERIC}
	</update>

	<update id="updateAddressMark" >
		UPDATE ADDRESS
		SET
			ADR_MARKYN = #{adrMarkyn}
		WHERE ADR_NO = #{adrNo}
	</update>

	<select id="selectTrashList" resultMap="addressMap">

         WITH ADDRESSLIST AS (
	        SELECT
	            ADR_NO,
	            EMP_NO,
	            ADR_NM,
	            ADR_ONEPOS,
	            ADR_POS,
	            ADR_DEP,
	            ADR_AFF,
	            ADR_MAIL,
	            ADR_TEL,
	            ADR_DELYN,
	            ADR_MARKYN
	        FROM ADDRESS
	        <where>
	            ADR_DELYN = 'Y' AND ADR_NM NOT LIKE '알수없음' AND EMP_NO = #{searchVO.empNo}
	            <include refid="searchFrag" />
	        </where>
	        ORDER BY ADR_NO
	    )
	    SELECT A.*
	    FROM (
	        SELECT ADDRESSLIST.*, ROWNUM RNUM
	        FROM ADDRESSLIST
	    ) A
	    WHERE RNUM BETWEEN #{firstRecord} AND #{lastRecord}

	</select>

	<update id="deleteTrash" parameterType="AddressVO">
		UPDATE ADDRESS
		SET
			ADR_NM = '알수없음',
			ADR_ONEPOS = '알수없음',
			ADR_POS = '알수없음',
			ADR_DEP = '알수없음',
			ADR_AFF = '알수없음',
			ADR_MAIL = '알수없음',
			ADR_TEL = '알수없음'
		WHERE ADR_NO = #{adrNo,jdbcType=NUMERIC}
	</update>

	<update id="restoreTrash" parameterType="AddressVO">
		UPDATE ADDRESS
		SET
		ADR_DELYN = 'N'
		WHERE ADR_NO = #{adrNo,jdbcType=NUMERIC}
	</update>


	<select id="selectAddressMarkList" resultMap="addressMap">

         WITH ADDRESSLIST AS (
	        SELECT
	            ADR_NO,
	            EMP_NO,
	            ADR_NM,
	            ADR_ONEPOS,
	            ADR_POS,
	            ADR_DEP,
	            ADR_AFF,
	            ADR_MAIL,
	            ADR_TEL,
	            ADR_DELYN,
	            ADR_MARKYN
	        FROM ADDRESS
	        <where>
	            ADR_DELYN = 'N' AND ADR_MARKYN = 'Y' AND EMP_NO = #{searchVO.empNo}
	            <include refid="searchFrag" />
	        </where>
	        ORDER BY ADR_NO
	    )
	    SELECT A.*
	    FROM (
	        SELECT ADDRESSLIST.*, ROWNUM RNUM
	        FROM ADDRESSLIST
	    ) A
	    WHERE RNUM BETWEEN #{firstRecord} AND #{lastRecord}

	</select>

<!-- 메일 내부+외부 주소록 조회 (혜원)-->
	<select id ="mailAddressList" parameterType="EmployeeVO" resultMap="addressMap">
		SELECT
		    ADR_NM
		  , ADR_MAIL
		  , ADR_AFF
		  , ADR_DEP
		  , ADR_ONEPOS
		  , ADR_POS
		FROM
		    (
		        WITH EMPLOYEEDETAILS AS (
		            SELECT
		                (
		                    SELECT
		                        EMP_NO
		                    FROM
		                        EMPLOYEE
		                    WHERE
		                        EMP_NO LIKE  ${empNo}
		                )         AS EMP
		              , E.EMP_NO
		              , E.COM_NO
		              , E.EMP_NM
		              , E.EMP_AFF
		              , E.EMP_COMMAIL
		              , E.EMP_MAIL
		              , E.EMP_ID
		              , E.EMP_STATE
		              , C.COM_NO  AS COMPANY_NO
		              , C.COM_NM
		              , O.ORG_NO
		              , O.ORG_DEP
		              , O.ORG_UPDEP
		              , O.ORG_LEVEL
		              , O.ORG_DF
		              , O.ORG_ID
		              , P.POS_NO
		              , P.POS_NM
		              , P2.POS_NM AS ONEPOSNM
		            FROM
		                EMPLOYEE         E
		                LEFT JOIN ATCH_FILE        AF ON E.EMP_PROFILE = AF.ATCH_FILE_ID
		                LEFT JOIN ATCH_FILE_DETAIL AFD ON AF.ATCH_FILE_ID = AFD.ATCH_FILE_ID
		                LEFT JOIN COMPANY          C ON E.COM_NO = C.COM_NO
		                LEFT JOIN ORGANIZATION     O ON E.EMP_DEP = O.ORG_NO
		                                            AND C.COM_NO = O.COM_NO
		                LEFT JOIN POSITION         P ON E.EMP_POS = P.POS_NO
		                                        AND C.COM_NO = P.COM_NO
		                LEFT JOIN POSITION         P2 ON E.EMP_ONEPOS = P2.POS_NO
		                                         AND C.COM_NO = P2.COM_NO
		            WHERE
		                    C.COM_NO =  ${comNo}
		                AND E.EMP_DELYN = 'N'
		        )
		        SELECT
		           EMP_NM   AS ADR_NM
		          , EMP_MAIL AS ADR_MAIL
		          , COM_NM AS ADR_AFF
		          , ORG_DEP AS ADR_DEP
		          , POS_NM   AS ADR_POS
		          , ONEPOSNM AS ADR_ONEPOS
		        FROM
		            EMPLOYEEDETAILS
		        ORDER BY
		            ORG_UPDEP NULLS FIRST
		          , ORG_ID
		          , ORG_UPDEP
		          , ORG_LEVEL
		          , ORG_DF
		    )
		UNION ALL
		SELECT
		   ADR_NM
		  , ADR_MAIL
		  , ADR_AFF
		  , ADR_DEP
		  , ADR_POS
		  , ADR_ONEPOS

		FROM
		    ADDRESS
		WHERE
		    EMP_NO LIKE ${empNo}
		    AND ADR_DELYN LIKE 'N'

	</select>



</mapper>